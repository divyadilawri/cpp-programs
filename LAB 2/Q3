#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define MAX_PARAGRAPH_LENGTH 1000
#define MAX_WORD_LENGTH 50
#define MAX_WORDS 100

typedef struct {
    char word[MAX_WORD_LENGTH];
    int count;
} WordFreq;

void toLowerCase(char *str) {
    for (int i = 0; str[i]; i++) {
        str[i] = tolower(str[i]);
    }
}

int main() {
    char paragraph[MAX_PARAGRAPH_LENGTH];
    WordFreq words[MAX_WORDS];
    int wordCount = 0;

    // Initialize word frequencies
    for (int i = 0; i < MAX_WORDS; i++) {
        words[i].count = 0;
    }

    // Read the paragraph
    printf("Enter a paragraph: ");
    fgets(paragraph, MAX_PARAGRAPH_LENGTH, stdin);
    paragraph[strcspn(paragraph, "\n")] = '\0'; // Remove newline character

    // Convert paragraph to lowercase
    toLowerCase(paragraph);

    // Tokenize the paragraph into words
    char *token = strtok(paragraph, " ,.-?!;\n");
    while (token != NULL) {
        // Check if the word already exists in the array
        int found = 0;
        for (int i = 0; i < wordCount; i++) {
            if (strcmp(words[i].word, token) == 0) {
                words[i].count++;
                found = 1;
                break;
            }
        }
        // If the word does not exist, add it to the array
        if (!found && wordCount < MAX_WORDS) {
            strcpy(words[wordCount].word, token);
            words[wordCount].count = 1;
            wordCount++;
        }
        token = strtok(NULL, " ,.-?!;\n");
    }

    // Print the word frequencies
    printf("Word frequencies:\n");
    for (int i = 0; i < wordCount; i++) {
        printf("%s: %d\n", words[i].word, words[i].count);
    }

    return 0;
}
